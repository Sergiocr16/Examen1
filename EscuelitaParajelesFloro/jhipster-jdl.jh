
entity Jugador {
	/*
    * Seria mejor tener una fecha de nacimiento 
    * en lugar de edad pero asi no lo establece los requerimientos.
    */
    nombre String required,
	apellido String required,
    edad Integer required min(0),
    cedula String required pattern("^0?\d(-?\d{4}){2}$"),
    posicion String
}

entity Categoria {
	nombre String required,
    edad Integer required min(0)
}

entity Responsable {
	nombre String required,
    apellido String required,
    email String required,
    telefono String required
}

enum Dia {
    LUNES, 
    MARTES, 
    MIERCOLES, 
    JUEVES, 
    VIERNES, 
    SABADO, 
    DOMINGO
}
/*
* Hay que preguntar si cada horario deberia tener un 
* entrenador asignado.
* Asi solo se mostraria el horario mas cercano asignado 
* a este, cuando inicie session
*/
entity Horario {
    /*
    * horaInicio y hora fin son la cantidad 
    * de minutos despues de media noche
    */
	horaInicio Integer required min(0) max(1439),
    horaFin Integer required min(0) max(1439),
    dia Dia required
}
entity Entrenamiento {
    descripcion String required, 
    fechaHora ZonedDateTime required
}

entity Desenpeno {
	calificacion Integer required min(0) max(100)
    notas String
}

/**
 * Relaciones Jugador.
 */

relationship ManyToOne {
	Jugador{responsable(email)} to Responsable,
    /*
    * Relacion con el usuario built-in 
    * que seria el entrenador (Verificar que sirva)
    */
    Entrenamiento{entrenador(login)} to User,
    Desenpeno{jugador(cedula)} to Jugador
}


relationship OneToMany {
	Categoria{horarios} to Horario{categoria(nombre)},
    Categoria{jugadores} to Jugador{categoria(nombre)},
    Horario{entrenamientos} to Entrenamiento{horario},
    Entrenamiento{desenpeno} to Desenpeno{entrenamiento(descripcion)} 
}

//paginacion para todas las entidades de angular
paginate * with pager
//Agrega dto a todas las entidades
dto * with mapstruct

// Crea los servicios sin interfaces.
service all with serviceClass //serviceImpl
angularSuffix * with ang
